name: Build Main

on:
  push:
    branches:
      - 'main'

concurrency: build-${{ github.repository }}

env:
  GOPRIVATE: github.com/bondaval/*
  GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

jobs:
  lint:
    uses: bondaval/.github/.github/workflows/go_lint.yml@main
    secrets: inherit
    with:
      notify_on_failure: true

  test:
    uses: bondaval/.github/.github/workflows/go_test.yml@main
    secrets: inherit
    with:
      notify_on_failure: true
      check_docker_service_url: "http://localhost:4566"

  build:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v2
        with:
          # Required for git semver (see: https://github.com/marketplace/actions/git-semantic-version)
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version-file: ./go.mod

      - name: Create build version
        id: version
        uses: paulhatch/semantic-version@v4.0.3
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"

      - name: Set build version
        run: echo "VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV

      - name: Configure git access
        run: git config --global url."https://bondaval:${GH_ACCESS_TOKEN}@github.com".insteadOf "https://github.com"

      - name: Tag commit
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          tag: v${{ env.VERSION }}

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: ${{ github.repository }} ${{ github.ref_name }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_LINK_NAMES: true
          SLACK_FOOTER: "<!here>"
